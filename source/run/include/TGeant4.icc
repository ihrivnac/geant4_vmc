//------------------------------------------------
// The Geant4 Virtual Monte Carlo package
// Copyright (C) 2007 - 2014 Ivana Hrivnacova
// All rights reserved.
//
// For the licensing terms see geant4_vmc/LICENSE.
// Contact: root-vmc@cern.ch
//-------------------------------------------------

/// \file TGeant4.icc
/// \brief Implementation of the inline functions for the TGeant4
/// class
///
/// \author I. Hrivnacova; IPN Orsay

#include "TG4Globals.h"
#include "TG4StepManager.h"

#include <G4Threading.hh>

//
// methods for step management
//

//_____________________________________________________________________________
inline TGeant4* TGeant4::MasterInstance() { return fgMasterInstance; }

//_____________________________________________________________________________
inline TVirtualMCApplication* TGeant4::MasterApplicationInstance()
{
  return fgMasterApplicationInstance;
}

//_____________________________________________________________________________
inline void TGeant4::StopTrack()
{
  /// Stop track

  fStepManager->StopTrack();
}

//_____________________________________________________________________________
inline void TGeant4::InterruptTrack()
{
  /// Interrupt track

  fStepManager->InterruptTrack();
}

//_____________________________________________________________________________
inline void TGeant4::StopEvent()
{
  /// Aborts the current event processing.

  fStepManager->StopEvent();
}

//_____________________________________________________________________________
inline void TGeant4::StopRun()
{
  /// Aborts the current run processing.

  fStepManager->StopRun();
}

//_____________________________________________________________________________
inline void TGeant4::SetMaxStep(Double_t step)
{
  /// Sets the maximum step allowed in the current logical volume.

  fStepManager->SetMaxStep(step);
}

//_____________________________________________________________________________
inline void TGeant4::SetMaxNStep(Int_t number)
{
  /// Sets the maximum number of steps.

  fStepManager->SetMaxNStep(number);
}

//_____________________________________________________________________________
inline void TGeant4::ForceDecayTime(Float_t time)
{
  /// Force decay time. \n Not yet implemented.

  fStepManager->ForceDecayTime(time);
}

//_____________________________________________________________________________
inline Int_t TGeant4::CurrentVolID(Int_t& copyNo) const
{
  /// Return the current sensitive detector ID
  /// and the copy number of the current physical volume.

  return fStepManager->CurrentVolID(copyNo);
}

//_____________________________________________________________________________
inline Int_t TGeant4::CurrentVolOffID(Int_t off, Int_t& copyNo) const
{
  /// Returns the off-th mother's of the current volume
  /// the sensitive detector ID and the copy number.

  return fStepManager->CurrentVolOffID(off, copyNo);
}

//_____________________________________________________________________________
inline const char* TGeant4::CurrentVolName() const
{
  /// Returns the current physical volume name.

  return fStepManager->CurrentVolName();
}

//_____________________________________________________________________________
inline const char* TGeant4::CurrentVolOffName(Int_t off) const
{
  /// Returns the off-th mother's physical volume name.

  return fStepManager->CurrentVolOffName(off);
}

//_____________________________________________________________________________
inline const char* TGeant4::CurrentVolPath()
{
  /// Returns the current volume path.

  return fStepManager->CurrentVolPath();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::CurrentBoundaryNormal(
  Double_t& x, Double_t& y, Double_t& z) const
{
  /// Returns the normal vector of the surface of the last volume exited

  return fStepManager->CurrentBoundaryNormal(x, y, z);
}

//_____________________________________________________________________________
inline Int_t TGeant4::CurrentMaterial(
  Float_t& a, Float_t& z, Float_t& dens, Float_t& radl, Float_t& absl) const
{
  /// Returns the parameters of the current material during transport;
  /// the return value is the number of elements in the mixture.

  return fStepManager->CurrentMaterial(a, z, dens, radl, absl);
}

//_____________________________________________________________________________
inline Int_t TGeant4::CurrentMedium() const
{
  /// Returns the second index of the current material (corresponding to
  /// G3 tracking medium index).

  return fStepManager->CurrentMedium();
}

//_____________________________________________________________________________
inline void TGeant4::Gmtod(Float_t* xm, Float_t* xd, Int_t iflag)
{
  /// Transforms a position from the world reference frame
  /// to the current volume reference frame.

  fStepManager->Gmtod(xm, xd, iflag);
}

//_____________________________________________________________________________
inline void TGeant4::Gmtod(Double_t* xm, Double_t* xd, Int_t iflag)
{
  /// Transforms a position from the world reference frame
  /// to the current volume reference frame.

  fStepManager->Gmtod(xm, xd, iflag);
}

//_____________________________________________________________________________
inline void TGeant4::Gdtom(Float_t* xd, Float_t* xm, Int_t iflag)
{
  /// Transforms a position from the current volume reference frame
  /// to the world reference frame.

  fStepManager->Gdtom(xd, xm, iflag);
}

//_____________________________________________________________________________
inline void TGeant4::Gdtom(Double_t* xd, Double_t* xm, Int_t iflag)
{
  /// Transforms a position from the current volume reference frame
  /// to the world reference frame.

  fStepManager->Gdtom(xd, xm, iflag);
}

//_____________________________________________________________________________
inline Double_t TGeant4::MaxStep() const
{
  /// Returns the maximum step allowed in the current logical volume
  /// by user limits.

  return fStepManager->MaxStep();
}

//_____________________________________________________________________________
inline Int_t TGeant4::GetMaxNStep() const
{
  /// Returns the maximum number of steps.

  return fStepManager->GetMaxNStep();
}

//_____________________________________________________________________________
inline void TGeant4::TrackPosition(TLorentzVector& position) const
{
  /// The current particle position (in the world reference frame)
  /// and the local time since the current track is created
  /// (position of the PostStepPoint).

  fStepManager->TrackPosition(position);
}

//_____________________________________________________________________________
inline void TGeant4::TrackPosition(Double_t& x, Double_t& y, Double_t& z) const
{
  /// The current particle position (in the world reference frame)
  /// and the local time since the current track is created
  /// (position of the PostStepPoint).

  fStepManager->TrackPosition(x, y, z);
}

//_____________________________________________________________________________
inline void TGeant4::TrackPosition(Float_t& x, Float_t& y, Float_t& z) const
{
  /// The current particle position (in the world reference frame)
  /// and the local time since the current track is created
  /// (position of the PostStepPoint) as float.

  fStepManager->TrackPosition(x, y, z);
}

//_____________________________________________________________________________
inline void TGeant4::TrackMomentum(TLorentzVector& momentum) const
{
  /// The current particle "momentum" (px, py, pz, Etot).

  fStepManager->TrackMomentum(momentum);
}

//_____________________________________________________________________________
inline void TGeant4::TrackMomentum(
  Double_t& px, Double_t& py, Double_t& pz, Double_t& etot) const
{
  /// The current particle "momentum" (px, py, pz, Etot).

  fStepManager->TrackMomentum(px, py, pz, etot);
}

//_____________________________________________________________________________
inline void TGeant4::TrackMomentum(
  Float_t& px, Float_t& py, Float_t& pz, Float_t& etot) const
{
  /// The current particle "momentum" (px, py, pz, Etot) as float.

  fStepManager->TrackMomentum(px, py, pz, etot);
}

//_____________________________________________________________________________
inline Double_t TGeant4::TrackStep() const
{
  /// Returns the current step length.

  return fStepManager->TrackStep();
}

//_____________________________________________________________________________
inline Double_t TGeant4::TrackLength() const
{
  /// Returns the length of the current track from its origin.

  return fStepManager->TrackLength();
}

//_____________________________________________________________________________
inline Double_t TGeant4::TrackTime() const
{
  /// Returns the local time since the current track is created. \n Comment: in
  /// Geant4: there is also defined proper time as the proper time of the
  /// dynamical particle of the current track.

  return fStepManager->TrackTime();
}

//_____________________________________________________________________________
inline Double_t TGeant4::Edep() const
{
  /// Returns the total energy deposit in this step.

  return fStepManager->Edep();
}

//_____________________________________________________________________________
inline Double_t TGeant4::NIELEdep() const
{
  /// Returns the total energy deposit in this step.

  return fStepManager->NIELEdep();
}

//_____________________________________________________________________________
inline Int_t TGeant4::StepNumber() const
{
  /// Returns the current step number.

  return fStepManager->StepNumber();
}

//_____________________________________________________________________________
inline Double_t TGeant4::TrackWeight() const
{
  /// Returns the current weight.

  return fStepManager->TrackWeight();
}

//_____________________________________________________________________________
inline void TGeant4::TrackPolarization(
  Double_t& polX, Double_t& polY, Double_t& polZ) const
{
  /// Returns the current polarization.

  fStepManager->TrackPolarization(polX, polY, polZ);
}

//_____________________________________________________________________________
inline void TGeant4::TrackPolarization(TVector3& pol) const
{
  /// Returns the current polarization.

  fStepManager->TrackPolarization(pol);
}

//_____________________________________________________________________________
inline Int_t TGeant4::TrackPid() const
{
  /// Returns the current particle PDG encoding.

  return fStepManager->TrackPid();
}

//_____________________________________________________________________________
inline Double_t TGeant4::TrackCharge() const
{
  /// Returns the current particle charge.

  return fStepManager->TrackCharge();
}

//_____________________________________________________________________________
inline Double_t TGeant4::TrackMass() const
{
  /// Returns the current particle mass at rest.

  return fStepManager->TrackMass();
}

//_____________________________________________________________________________
inline Double_t TGeant4::Etot() const
{
  /// Returns the total energy of the current particle.

  return fStepManager->Etot();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsTrackInside() const
{
  /// Returns true if the particle does not cross a geometrical boundary
  /// and is not in the vertex.

  return fStepManager->IsTrackInside();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsTrackEntering() const
{
  /// Returns true if the particle crosses a geometrical boundary
  /// or is in the vertex.

  return fStepManager->IsTrackEntering();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsTrackExiting() const
{
  /// Returns true if the particle crosses a geometrical boundary.

  return fStepManager->IsTrackExiting();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsTrackOut() const
{
  /// Returns true if the particle crosses the world boundary
  /// at the post-step point.

  return fStepManager->IsTrackOut();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsTrackDisappeared() const
{
  /// Returns true if particle has disappeared
  /// (due to any physical process)
  /// or has been killed, suspended or postponed to next event.

  return fStepManager->IsTrackDisappeared();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsTrackStop() const
{
  /// Returns true if the particle has stopped
  /// or has been killed, suspended or postponed to the next event.

  return fStepManager->IsTrackStop();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsTrackAlive() const
{
  /// Returns true if particle continues tracking.

  return fStepManager->IsTrackAlive();
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsNewTrack() const
{
  /// Returns true when the track performs the first step.

  return fStepManager->IsNewTrack();
}

//_____________________________________________________________________________
inline Int_t TGeant4::NSecondaries() const
{
  /// Returns the number of secondary particles generated
  /// in the current step.

  return fStepManager->NSecondaries();
}

//_____________________________________________________________________________
inline void TGeant4::GetSecondary(Int_t isec, Int_t& particleId,
  TLorentzVector& position, TLorentzVector& momentum)
{
  /// Fills the parameters (particle encoding, position, momentum)
  /// of the generated secondary particle which is specified by index.

  fStepManager->GetSecondary(isec, particleId, position, momentum);
}

//_____________________________________________________________________________
inline TMCProcess TGeant4::ProdProcess(Int_t isec) const
{
  /// Returns the process that has produced the secondary particles specified
  /// with isec index in the current step.

  return fStepManager->ProdProcess(isec);
}

//_____________________________________________________________________________
inline Int_t TGeant4::StepProcesses(TArrayI& proc) const
{
  /// Fills the array of processes that were active in the current step
  /// and returns the number of them.

  return fStepManager->StepProcesses(proc);
}

//_____________________________________________________________________________
inline Bool_t TGeant4::IsMT() const
{
  /// Returns true if Geant4 is built in multi-threading mode and
  /// MT mode is not inactivated in runConfiguration.

  return fIsMT;
}
